{"version":3,"sources":["../src/index.js"],"names":["config","update","region","s3","S3","email","createTransport","storageDir","join","__dirname","upload","storage","bucket","metadata","req","file","cb","fieldName","fieldname","key","filename","Date","now","toString","originalname","PORT","app","server","createServer","use","secret","process","env","SESSIONSECRET","resave","saveUninitialized","userSetup","res","next","session","user","id","name","username","profilePic","loggedIn","isAdmin","exposedHeaders","json","limit","set","err","db","console","log","listen","address","port"],"mappings":"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","file":"index.js","sourcesContent":["import http from 'http';\nimport express from 'express';\nimport session from 'express-session';\nimport cors from 'cors';\nimport morgan from 'morgan';\nimport bodyParser from 'body-parser';\nimport multer from 'multer'\nimport path from 'path';\n\nimport {connect} from \"./database\";\nimport AppRouter from './router'\nimport nodemailer from 'nodemailer'\nimport {smtp, s3Config, s3Region,s3Bucket} from './config'\n\n// Amazon S3 Setup\nimport AWS from 'aws-sdk'\nimport multerS3 from 'multer-s3'\n\n\nAWS.config.update(s3Config);\n\nAWS.config.region = s3Region ;\n\nconst s3 = new AWS.S3();\n\n\n\n// Setup Email\n\nlet email = nodemailer.createTransport(smtp);\n\n\n// File storage config\n\nconst storageDir = path.join(__dirname, '..', 'storage');\n\n\n//const upload = multer({ storage: storageConfig }); // local upload.\n\nconst upload = multer({\n    storage: multerS3({\n        s3: s3,\n        bucket: s3Bucket,\n        metadata: function (req, file, cb) {\n            cb(null, {fieldName: file.fieldname});\n        },\n        key: function (req, file, cb) {\n            const filename = `${Date.now().toString()}-${file.originalname}`;\n            cb(null, filename)\n        }\n    })\n})\n\n\n\n// End file storage config\n\nconst PORT = 3000;\nconst app = express();\napp.server = http.createServer(app);\n\n\napp.use(morgan('dev'));\napp.use(session({\n    secret: process.env.SESSIONSECRET || \"Coding is fun!\",\n    resave: false,\n    saveUninitialized: true\n}));\n\nfunction userSetup(req, res, next) {\n    if (!req.session.user) {\n        req.session.user = {\n            id: null,\n            name: '',\n            username: '',\n            email: '',\n            bucket: '',\n            profilePic: null,\n            loggedIn: false,\n            isAdmin: false\n        }\n    }\n    next()\n}\n\napp.use(userSetup);\n\napp.use(cors({\n    exposedHeaders: \"*\"\n}));\n\napp.use(bodyParser.json({\n    limit: '50mb'\n}));\n\n\napp.set('root', __dirname);\napp.set('storageDir', storageDir);\napp.upload = upload;\napp.email = email;\napp.s3 = s3;\n\n//Connect to the database.\n\nconnect((err, db) => {\n\n    if(err){\n        console.log(\"An error connecting to the database\", err);\n        throw (err);\n    }\n\n    app.db = db;\n    app.set('db', db);\n\n\n    // init routers.\n    new AppRouter(app);\n\n\n    app.server.listen(process.env.PORT || PORT, () => {\n        console.log(`App is running on port ${app.server.address().port}`);\n    });\n\n});\n\n\n\nexport default app;"]}