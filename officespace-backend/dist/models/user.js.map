{"version":3,"sources":["../../src/models/user.js"],"names":["saltRounds","User","app","model","username","email","password","bucket","created","Date","updated","findUserByEmail","bind","login","findById","id","cb","db","query","_id","collection","find","limit","toArray","err","result","user","get","error","message","name","console","log","passwordCheck","compareSync","auth","createToken","token","obj","trim","toLower","errors","length","push","hashPassword","hashSync","validate","messages","each","join","insertOne"],"mappings":"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","file":"user.js","sourcesContent":["import _ from 'lodash'\r\nimport bcrypt from 'bcrypt'\r\nimport Auth from './auth'\r\nimport {ObjectID} from 'mongodb'\r\n\r\nconst saltRounds = 10;\r\n\r\nexport default class User{\r\n\r\n\tconstructor(app){\r\n\r\n\t\tthis.app = app;\r\n\r\n\t\tthis.model = {\r\n\t\t\tusername: null,\r\n\t\t\temail: null,\r\n\t\t\tpassword: null,\r\n\t\t\tbucket: null,\r\n\t\t\tcreated: new Date(),\r\n\t\t\tupdated: null,\r\n\t\t}\r\n\r\n\t\tthis.findUserByEmail = this.findUserByEmail.bind(this);\r\n\t\tthis.login = this.login.bind(this);\r\n\t\tthis.findById = this.findById.bind(this);\r\n\t}\r\n\r\n\tfindById(id = null, cb = () => {}){\r\n\r\n\t\tconst db = this.app.db;\r\n\r\n\t\tconst query = {\r\n\t\t\t_id: new ObjectID(id)\r\n\t\t}\r\n\t\tdb.collection('users').find(query).limit(1).toArray((err, result) => {\r\n\r\n\t\t\tconst user = _.get(result, '[0]');\r\n\t\t\tif(err === null && user){\r\n\r\n\t\t\t\tdelete user.password;\r\n\t\t\t\t\r\n\t\t\t\treturn cb(null, user);\r\n\t\t\t}\r\n\r\n\t\t\tconst error = {message: \"User not found.\"}\r\n\t\t\treturn cb(error, null);\r\n\t\t})\r\n\t}\r\n\tlogin(email, password, cb = () => {}){\r\n\r\n\t\tconst app = this.app;\r\n\r\n\t\tlet error = null;\r\n\t\tlet user = {name: \"A\", email: \"test@gmail.com\"};\r\n\r\n\t\tconsole.log(\"Email: \", email, \"password:\", password);\r\n\r\n\t\tif(!email || !password){\r\n\r\n\t\t\terror = {message: \"Email or password is required.\"};\r\n\t\t\treturn cb(error, null);\r\n\t\t}\r\n\r\n\t\tthis.findUserByEmail(email, (err, user) => {\r\n\r\n\t\t\tif(err === null && user){\r\n\r\n\t\t\t\tconst passwordCheck = bcrypt.compareSync(password, user.password); // false\r\n\r\n\t\t\t\tif(passwordCheck){\r\n\r\n\t\t\t\t\t// create new token and return this token key for user and use it for later request.\r\n\t\t\t\t\tconst auth = new Auth(app);\r\n\r\n\r\n\t\t\t\t\tauth.createToken(user, null, (err, token) => {\r\n\r\n\t\t\t\t\t\tif(err){\r\n\r\n\t\t\t\t\t\t\terror = {message: \"An error login your account\"};\r\n\t\t\t\t\t\t\treturn cb(error, null);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tdelete user.password;\r\n\t\t\t\t\t\ttoken.user = user;\r\n\t\t\t\t\t\treturn cb(null, token);\r\n\t\t\t\t\t});\r\n\t\t\r\n\t\t\t\t}else{\r\n\r\n\t\t\t\t\terror = {message: \"Password does not match.\"};\r\n\r\n\t\t\t\t\treturn cb(error, null);\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\t\t\tif(err || !user){\r\n\t\t\t\terror = {message: \"An error login your account\"};\r\n\r\n\t\t\t\treturn cb(error, null);\r\n\t\t\t}\r\n\r\n\t\t});\r\n\r\n\t}\r\n\r\n\tinitWithObject(obj){\r\n\r\n\t\tthis.model.name = _.trim(_.get(obj, 'name', null));\r\n\t\tthis.model.email = _.toLower(_.trim(_.get(obj, 'email', null)));\r\n\t\tthis.model.password = _.get(obj, 'password', null);\r\n\t\tthis.model.bucket = _.trim(_.get(obj, 'bucket', null));\r\n\r\n\t\treturn this;\r\n\t}\r\n\r\n\tvalidate(cb = () => {}){\r\n\r\n\r\n\t\tlet errors = [];\r\n\r\n\r\n\t\tconst model = this.model;\r\n\t\tconst db = this.app.db;\r\n\r\n\r\n\t\tif(model.password.length < 3 ){\r\n\r\n\t\t\terrors.push({\r\n\t\t\t\tmessage: \"Password should more than 3 characters.\"\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tthis.findUserByEmail(model.email, (err, user) => {\r\n\r\n\r\n\t\t\tif(err || user){\r\n\r\n\t\t\t\terrors.push({message: \"Email already exists.\"});\r\n\t\t\t}\r\n\r\n\r\n\t\t\treturn cb(errors);\r\n\t\t});\r\n\t}\r\n\r\n\tfindUserByEmail(email = null, cb = () => {}){\r\n\t\tconst db = this.app.db;\r\n\r\n\t\tconst query = {\r\n\t\t\temail: email\r\n\t\t};\r\n\r\n\t\tdb.collection('users').find(query).limit(1).toArray((err, result) => {\r\n\t\t\treturn cb(err, _.get(result, '[0]', null));\r\n\t\t}); \r\n\t}\r\n\tcreate(cb){\r\n\r\n\t\tlet model = this.model;\r\n\t\tconst db = this.app.db;\r\n\r\n\t\tconst hashPassword = bcrypt.hashSync(model.password, saltRounds);\r\n\t\tmodel.password = hashPassword;\r\n\t\t\r\n\t\tthis.validate((errors) => {\r\n\r\n\t\t\tlet messages = [];\r\n\r\n\t\t\tif(errors.length > 0){\r\n\r\n\t\t\t\t_.each(errors, (err) => {\r\n\r\n\t\t\t\t\tmessages.push(err.message);\r\n\t\t\t\t});\r\n\r\n\t\t\t\treturn cb(_.join(messages, ','), null);\r\n\t\t\t\t\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tdb.collection('users').insertOne(model, (err, result) => {\r\n\t\t\t\t\treturn cb(err, model);\r\n\t\t\t});\r\n\t\t});\r\n\t}\r\n}"]}