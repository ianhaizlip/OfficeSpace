{"version":3,"sources":["../src/router.js"],"names":["AppRouter","app","setupRouters","db","get","uploadDir","upload","req","res","next","status","json","version","session","user","post","array","files","fileModels","each","fileObject","newFile","initWithObject","toJSON","push","length","collection","insertMany","err","result","error","message","from","to","insertedIds","insertOne","sendEmail","sendDownloadLink","info","fileId","params","id","find","_id","toArray","fileName","file","downloader","downloadUrl","getDownloadUrl","redirect","postId","getPostById","archiver","download","console","log","body","create","newUser","email","password","login","token","auth","checkAuth","isLoggedIn","userId","findById","obj","callback","postObjectId","limit","results","Error","fileIds","$in"],"mappings":"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","file":"router.js","sourcesContent":["import path from 'path'\r\nimport {version} from '../package.json'\r\nimport _ from 'lodash'\r\nimport File from './models/file'\r\nimport Post from './models/post'\r\nimport {ObjectID} from 'mongodb'\r\nimport FileArchiver from './archiver'\r\nimport Email from './email'\r\nimport S3 from './s3'\r\nimport User from './models/user'\r\nimport Auth from './models/auth'\r\n\r\nclass AppRouter {\r\n\r\n    constructor(app) {\r\n        this.app = app;\r\n        this.setupRouters();\r\n    }\r\n\r\n\r\n    setupRouters() {\r\n\r\n        const app = this.app;\r\n        const db = app.get('db');\r\n        const uploadDir = app.get('storageDir');\r\n        const upload = app.upload;\r\n\r\n        // root routing.\r\n        app.get('/', (req, res, next) => {\r\n\r\n            return res.status(200).json({\r\n                version: version\r\n            });\r\n\r\n        });\r\n\r\n        app.get('/api/session', function (req, res, next) {\r\n            res.json(req.session.user)\r\n        });\r\n\r\n        // Upload routing\r\n        app.post('/api/upload', upload.array('files'), (req, res, next) => {\r\n            const files = _.get(req, 'files', []);\r\n\r\n\r\n            let fileModels = [];\r\n\r\n\r\n            _.each(files, (fileObject) => {\r\n                const newFile = new File(app).initWithObject(fileObject).toJSON();\r\n                fileModels.push(newFile);\r\n            });\r\n\r\n\r\n            if (fileModels.length) {\r\n\r\n                db.collection('files').insertMany(fileModels, (err, result) => {\r\n                    if (err) {\r\n\r\n                        return res.status(503).json({\r\n                            error: {\r\n                                message: \"Unable saved your files.\",\r\n                            }\r\n                        });\r\n                    }\r\n\r\n\r\n                    let post = new Post(app).initWithObject({\r\n\r\n                        from: _.get(req, 'body.from'),\r\n                        to: _.get(req, 'body.to'),\r\n                        message: _.get(req, 'body.message'),\r\n                        files: result.insertedIds,\r\n                    }).toJSON();\r\n\r\n\r\n                    // let save post object to posts collection.\r\n\r\n                    db.collection('posts').insertOne(post, (err, result) => {\r\n\r\n\r\n                        if (err) {\r\n                            return res.status(503).json({error: {message: \"Your upload could not be saved.\"}});\r\n                        }\r\n\r\n                        //implement email sending to user with download link.\r\n\r\n                        // send email\r\n                        const sendEmail = new Email(app).sendDownloadLink(post, (err, info) => {\r\n\r\n\r\n                        });\r\n\r\n\r\n                        // callback to react app with post detail.\r\n                        return res.json(post);\r\n\r\n                    });\r\n\r\n\r\n                });\r\n\r\n            } else {\r\n\r\n                return res.status(503).json({\r\n                    error: {message: \"Files upload is required.\"}\r\n                });\r\n            }\r\n        });\r\n\r\n        // Download routing\r\n\r\n        app.get('/api/download/:id', (req, res, next) => {\r\n\r\n            const fileId = req.params.id;\r\n            db.collection('files').find({_id: ObjectID(fileId)}).toArray((err, result) => {\r\n\r\n                const fileName = _.get(result, '[0].name');\r\n                if (err || !fileName) {\r\n\r\n                    return res.status(404).json({\r\n                        error: {\r\n                            message: \"File not found.\"\r\n                        }\r\n                    })\r\n                }\r\n\r\n\r\n                // Download file from S3 service\r\n                const file = _.get(result, '[0]');\r\n                const downloader = new S3(app, res);\r\n\r\n\r\n                // return downloader.download(file); Proxy download from s3 service\r\n\r\n                // Download Directly from S3\r\n\r\n\r\n                const downloadUrl = downloader.getDownloadUrl(file);\r\n\r\n                return res.redirect(downloadUrl);\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n                /*const filePath = path.join(uploadDir, fileName);\r\n\r\n                return res.download(filePath, _.get(result, '[0].originalName'), (err) => {\r\n\r\n                    if (err) {\r\n\r\n                        return res.status(404).json({\r\n\r\n                            error: {\r\n                                message: \"File not found\"\r\n                            }\r\n                        });\r\n                    } else {\r\n\r\n                        console.log(\"File is downloaded.\");\r\n\r\n                    }\r\n\r\n                });*/\r\n\r\n\r\n\r\n            });\r\n\r\n\r\n        });\r\n\r\n\r\n        // routing for post detail /api/posts/:id\r\n\r\n        app.get('/api/posts/:id', (req, res, next) => {\r\n\r\n            const postId = _.get(req, 'params.id');\r\n\r\n            this.getPostById(postId, (err, result) => {\r\n\r\n\r\n                if (err) {\r\n                    return res.status(404).json({error: {message: 'File not found.'}});\r\n                }\r\n\r\n                return res.json(result);\r\n            })\r\n\r\n\r\n        });\r\n\r\n        // Routing download zip files.\r\n        app.get('/api/posts/:id/download', (req, res, next) => {\r\n\r\n            const id = _.get(req, 'params.id', null);\r\n\r\n\r\n            this.getPostById(id, (err, result) => {\r\n\r\n                if (err) {\r\n                    return res.status(404).json({error: {message: 'File not found.'}});\r\n                }\r\n\r\n                const files = _.get(result, 'files', []);\r\n                const archiver = new FileArchiver(app, files, res).download();\r\n                return archiver;\r\n\r\n            })\r\n        });\r\n\r\n\r\n        // Create new users post\r\n\r\n        app.post('/api/users', (req, res, next) => {\r\n\r\n        console.log(\"this is the response\", res);\r\n\r\n            const body = _.get(req, 'body');\r\n\r\n            console.log(\"Data from fontend posted: \", body);\r\n\r\n            const user = new User(app);\r\n            user.initWithObject(body).create((err, newUser) => {\r\n\r\n\r\n                console.log(\"New user created with error & callback\", err, newUser);\r\n\r\n\r\n                if(err){\r\n                    return res.status(503).json({\r\n                        error: {message: err}\r\n                    });\r\n                }\r\n                return res.status(200).json(newUser);\r\n            });\r\n\r\n\r\n\r\n        });\r\n\r\n\r\n        // Login user \r\n\r\n        app.post('/api/users/login', (req, res, next) => {\r\n\r\n            const body = _.get(req, 'body', {});\r\n\r\n            const user = new User(app);\r\n\r\n            const email = _.get(body, 'email');\r\n            const password = _.get(body, 'password');\r\n\r\n\r\n            user.login(email, password, (err, token) => {\r\n\r\n                    if(err){\r\n\r\n                        return res.status(401).json({\r\n                            message: \"An error login your account. Please try again!\"\r\n                        });\r\n                    }\r\n\r\n                    return res.status(200).json(token);\r\n            });\r\n\r\n\r\n            \r\n\r\n        });\r\n\r\n        // get my profile detail\r\n        app.get('/api/users/:id', (req, res, next) => {\r\n\r\n\r\n\r\n            const auth = new Auth(app);\r\n\r\n            auth.checkAuth(req, (isLoggedIn) => {\r\n\r\n\r\n                if(!isLoggedIn){\r\n\r\n                    return res.status(401).json({\r\n                        message: \"Unauthorized\"\r\n                    });\r\n                }\r\n\r\n\r\n                const userId = _.get(req, 'params.id', null);\r\n\r\n                const user = new User(app).findById(userId, (err, obj) => {\r\n\r\n\r\n                        if(err){\r\n\r\n                            return res.status(404).json({\r\n                                message: \"User not found.\"\r\n                            });\r\n                        }\r\n\r\n                        return res.status(200).json(obj);\r\n\r\n                 });\r\n\r\n\r\n\r\n            });\r\n\r\n            \r\n\r\n\r\n\r\n            \r\n\r\n\r\n        });\r\n\r\n    }\r\n\r\n\r\n    getPostById(id, callback = () => {\r\n    }) {\r\n\r\n\r\n        const app = this.app;\r\n\r\n        const db = app.get('db');\r\n\r\n\r\n        let postObjectId = null;\r\n        try {\r\n            postObjectId = new ObjectID(id);\r\n        }\r\n        catch (err) {\r\n\r\n            return callback(err, null);\r\n\r\n        }\r\n\r\n        db.collection('posts').find({_id: postObjectId}).limit(1).toArray((err, results) => {\r\n            let result = _.get(results, '[0]');\r\n\r\n            if (err || !result) {\r\n                return callback(err ? err : new Error(\"File not found.\"));\r\n            }\r\n\r\n            const fileIds = _.get(result, 'files', []);\r\n\r\n            db.collection('files').find({_id: {$in: fileIds}}).toArray((err, files) => {\r\n\r\n                if (err || !files || !files.length) {\r\n                    return callback(err ? err : new Error(\"File not found.\"));\r\n                }\r\n\r\n                result.files = files;\r\n\r\n\r\n                return callback(null, result);\r\n\r\n            });\r\n\r\n\r\n        })\r\n    }\r\n\r\n}\r\n\r\n\r\nexport default AppRouter;"]}