{"version":3,"sources":["../src/router.js"],"names":["AppRouter","app","setupRouters","db","get","uploadDir","upload","req","res","next","status","json","version","session","user","post","array","files","fileModels","each","fileObject","newFile","initWithObject","toJSON","push","length","collection","insertMany","err","result","error","message","from","to","insertedIds","insertOne","sendEmail","sendDownloadLink","info","fileId","params","id","find","_id","toArray","fileName","file","downloader","downloadUrl","getDownloadUrl","redirect","postId","getPostById","archiver","download","console","log","body","create","newUser","auth","checkAuth","isLoggedIn","userId","findById","obj","callback","postObjectId","limit","results","Error","fileIds","$in"],"mappings":"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","file":"router.js","sourcesContent":["import path from 'path'\r\nimport {version} from '../package.json'\r\nimport _ from 'lodash'\r\nimport File from './models/file'\r\nimport Post from './models/post'\r\nimport {ObjectID} from 'mongodb'\r\nimport FileArchiver from './archiver'\r\nimport Email from './email'\r\nimport S3 from './s3'\r\nimport User from './models/user'\r\nimport Auth from './models/auth'\r\n\r\nclass AppRouter {\r\n\r\n    constructor(app) {\r\n        this.app = app;\r\n        this.setupRouters();\r\n    }\r\n\r\n\r\n    setupRouters() {\r\n\r\n        const app = this.app;\r\n        const db = app.get('db');\r\n        const uploadDir = app.get('storageDir');\r\n        const upload = app.upload;\r\n\r\n        // root routing.\r\n        app.get('/', (req, res, next) => {\r\n\r\n            return res.status(200).json({\r\n                version: version\r\n            });\r\n\r\n        });\r\n\r\n        app.get('/api/session', function (req, res, next) {\r\n            res.json(req.session.user)\r\n        });\r\n\r\n        // Upload routing\r\n        app.post('/api/upload', upload.array('files'), (req, res, next) => {\r\n            const files = _.get(req, 'files', []);\r\n\r\n\r\n            let fileModels = [];\r\n\r\n\r\n            _.each(files, (fileObject) => {\r\n                const newFile = new File(app).initWithObject(fileObject).toJSON();\r\n                fileModels.push(newFile);\r\n            });\r\n\r\n\r\n            if (fileModels.length) {\r\n\r\n                db.collection('files').insertMany(fileModels, (err, result) => {\r\n                    if (err) {\r\n\r\n                        return res.status(503).json({\r\n                            error: {\r\n                                message: \"Unable saved your files.\",\r\n                            }\r\n                        });\r\n                    }\r\n\r\n\r\n                    let post = new Post(app).initWithObject({\r\n\r\n                        from: _.get(req, 'body.from'),\r\n                        to: _.get(req, 'body.to'),\r\n                        message: _.get(req, 'body.message'),\r\n                        files: result.insertedIds,\r\n                    }).toJSON();\r\n\r\n\r\n                    // let save post object to posts collection.\r\n\r\n                    db.collection('posts').insertOne(post, (err, result) => {\r\n\r\n\r\n                        if (err) {\r\n                            return res.status(503).json({error: {message: \"Your upload could not be saved.\"}});\r\n                        }\r\n\r\n                        //implement email sending to user with download link.\r\n\r\n                        // send email\r\n                        const sendEmail = new Email(app).sendDownloadLink(post, (err, info) => {\r\n\r\n\r\n                        });\r\n\r\n\r\n                        // callback to react app with post detail.\r\n                        return res.json(post);\r\n\r\n                    });\r\n\r\n\r\n                });\r\n\r\n            } else {\r\n\r\n                return res.status(503).json({\r\n                    error: {message: \"Files upload is required.\"}\r\n                });\r\n            }\r\n        });\r\n\r\n        // Download routing\r\n\r\n        app.get('/api/download/:id', (req, res, next) => {\r\n\r\n            const fileId = req.params.id;\r\n            db.collection('files').find({_id: ObjectID(fileId)}).toArray((err, result) => {\r\n\r\n                const fileName = _.get(result, '[0].name');\r\n                if (err || !fileName) {\r\n\r\n                    return res.status(404).json({\r\n                        error: {\r\n                            message: \"File not found.\"\r\n                        }\r\n                    })\r\n                }\r\n\r\n\r\n                // Download file from S3 service\r\n                const file = _.get(result, '[0]');\r\n                const downloader = new S3(app, res);\r\n\r\n\r\n                // return downloader.download(file); Proxy download from s3 service\r\n\r\n                // Download Directly from S3\r\n\r\n\r\n                const downloadUrl = downloader.getDownloadUrl(file);\r\n\r\n                return res.redirect(downloadUrl);\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n                /*const filePath = path.join(uploadDir, fileName);\r\n\r\n                return res.download(filePath, _.get(result, '[0].originalName'), (err) => {\r\n\r\n                    if (err) {\r\n\r\n                        return res.status(404).json({\r\n\r\n                            error: {\r\n                                message: \"File not found\"\r\n                            }\r\n                        });\r\n                    } else {\r\n\r\n                        console.log(\"File is downloaded.\");\r\n\r\n                    }\r\n\r\n                });*/\r\n\r\n\r\n\r\n            });\r\n\r\n\r\n        });\r\n\r\n\r\n        // routing for post detail /api/posts/:id\r\n\r\n        app.get('/api/posts/:id', (req, res, next) => {\r\n\r\n            const postId = _.get(req, 'params.id');\r\n\r\n            this.getPostById(postId, (err, result) => {\r\n\r\n\r\n                if (err) {\r\n                    return res.status(404).json({error: {message: 'File not found.'}});\r\n                }\r\n\r\n                return res.json(result);\r\n            })\r\n\r\n\r\n        });\r\n\r\n        // Routing download zip files.\r\n        app.get('/api/posts/:id/download', (req, res, next) => {\r\n\r\n            const id = _.get(req, 'params.id', null);\r\n\r\n\r\n            this.getPostById(id, (err, result) => {\r\n\r\n                if (err) {\r\n                    return res.status(404).json({error: {message: 'File not found.'}});\r\n                }\r\n\r\n                const files = _.get(result, 'files', []);\r\n                const archiver = new FileArchiver(app, files, res).download();\r\n                return archiver;\r\n\r\n            })\r\n        });\r\n\r\n\r\n        // Create new users post\r\n\r\n        app.post('/api/users', (req, res, next) => {\r\n\r\n        console.log(\"this is the response\", res);\r\n\r\n            const body = _.get(req, 'body');\r\n\r\n            console.log(\"Data from fontend posted: \", body);\r\n\r\n            const user = new User(app);\r\n            user.initWithObject(body).create((err, newUser) => {\r\n\r\n\r\n                console.log(\"New user created with error & callback\", err, newUser);\r\n\r\n\r\n                if(err){\r\n                    return res.status(503).json({\r\n                        error: {message: err}\r\n                    });\r\n                }\r\n                return res.status(200).json(newUser);\r\n            });\r\n\r\n\r\n\r\n        });\r\n\r\n\r\n        // // Login user \r\n\r\n        // app.post('/api/login', (req, res, next) => {\r\n\r\n        //     const body = _.get(req, 'body', {});\r\n\r\n        //     const user = new User(app);\r\n\r\n        //     const email = _.get(body, 'email');\r\n        //     const password = _.get(body, 'password');\r\n\r\n\r\n        //     user.login(email, password, (err, token) => {\r\n\r\n        //             if(err){\r\n\r\n        //                 return res.status(401).json({\r\n        //                     message: \"An error login your account. Please try again!\"\r\n        //                 });\r\n        //             }\r\n\r\n        //             return res.status(200).json(token);\r\n        //     });\r\n\r\n\r\n            \r\n\r\n        // });\r\n\r\n        // get my profile detail\r\n        app.get('/api/users/:id', (req, res, next) => {\r\n\r\n\r\n\r\n            const auth = new Auth(app);\r\n\r\n            auth.checkAuth(req, (isLoggedIn) => {\r\n\r\n\r\n                if(!isLoggedIn){\r\n\r\n                    return res.status(401).json({\r\n                        message: \"Unauthorized\"\r\n                    });\r\n                }\r\n\r\n\r\n                const userId = _.get(req, 'params.id', null);\r\n\r\n                const user = new User(app).findById(userId, (err, obj) => {\r\n\r\n\r\n                        if(err){\r\n\r\n                            return res.status(404).json({\r\n                                message: \"User not found.\"\r\n                            });\r\n                        }\r\n\r\n                        return res.status(200).json(obj);\r\n\r\n                 });\r\n\r\n\r\n\r\n            });\r\n\r\n            \r\n\r\n\r\n\r\n            \r\n\r\n\r\n        });\r\n\r\n    }\r\n\r\n\r\n    getPostById(id, callback = () => {\r\n    }) {\r\n\r\n\r\n        const app = this.app;\r\n\r\n        const db = app.get('db');\r\n\r\n\r\n        let postObjectId = null;\r\n        try {\r\n            postObjectId = new ObjectID(id);\r\n        }\r\n        catch (err) {\r\n\r\n            return callback(err, null);\r\n\r\n        }\r\n\r\n        db.collection('posts').find({_id: postObjectId}).limit(1).toArray((err, results) => {\r\n            let result = _.get(results, '[0]');\r\n\r\n            if (err || !result) {\r\n                return callback(err ? err : new Error(\"File not found.\"));\r\n            }\r\n\r\n            const fileIds = _.get(result, 'files', []);\r\n\r\n            db.collection('files').find({_id: {$in: fileIds}}).toArray((err, files) => {\r\n\r\n                if (err || !files || !files.length) {\r\n                    return callback(err ? err : new Error(\"File not found.\"));\r\n                }\r\n\r\n                result.files = files;\r\n\r\n\r\n                return callback(null, result);\r\n\r\n            });\r\n\r\n\r\n        })\r\n    }\r\n\r\n}\r\n\r\n\r\nexport default AppRouter;"]}